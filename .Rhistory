x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp[X, ] * temp[Y, ]
temp['X', ] * temp['Prob', ]
mean(temp['X', ] * temp['Prob', ])
sum(temp['X', ] * temp['Prob', ])
3*.3
2*..2
2*.2
mean(1*10 + 2*20 + 3*30 + 4*40)
mean(c(rep(1,10), rep(2,20), rep(3,30), rep(4,40)))
(.75*.3)/((.75*.3)+(.48*.7))
pwd
getwd()
setwd('Reproducible Research//PeerAssesment1')
dir()
setwd('RepData_PeerAssessment1/')
dir()
data
data.isna()
data
head(data)
data <- read.csv('activity.csv', header=TRUE, stringsAsFactors=FALSE)
head(data)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
First unzip the activity.zip file, if activity.csv is not yet in the working directory.
```{r echo=TRUE}
if(!'activity.csv' %in% dir()){
unzip('activity.zip')
unlink('activity.zip')}
```
Load the data and show first six rows.
```{r echo=TRUE}
data <- read.csv('activity.csv', header=TRUE, stringsAsFactors=FALSE)
head(data)
```
Transform the date variable into datetime objects with the lubridate package.
```{r echo=TRUE}
library(lubridate)
data$date <- ymd(data$date)
```
## What is mean total number of steps taken per day?
Create a table with the plyr package that sums the number of steps per day.
```{r echo=TRUE, message=FALSE}
library(plyr)
stepsperday <- ddply(data, .(date), summarize, steps=sum(steps, na.rm=TRUE))
```
Then make a ggplot histogram of the total number of steps taken each day.
```{r echo=TRUE}
library(ggplot2)
ggplot(stepsperday, aes(date, steps)) + geom_histogram(stat="identity") + ggtitle(("Number of steps per day"))
```
Calculate the mean and median total of steps taken per day.
```{r echo=TRUE}
mean(stepsperday$steps)
median(stepsperday$steps)
```
## What is the average daily activity pattern?
Calculate the average number of steps taken in each five number interval (i.e. the same daily interval averaged across all days) and create a time series plot.
```{r echo=TRUE}
averageinterval <- ddply(data, .(interval), summarize, steps=mean(steps, na.rm=TRUE))
ggplot(averageinterval, aes(interval, steps)) + geom_line() + ggtitle("Average steps per 5-minute interval")
```
The 5-minute interval which contains the maximum number of steps on average, across all the days in the dataset:
```{r echo=TRUE}
head(averageinterval[with(averageinterval, order(steps, decreasing=TRUE)),], n=1)
```
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
data
data.isna()
data[].isna()
data[:steps].isna()
data$steps.isna()
isna(data$steps)
data$steps
data$steps.isna()
isna()
is.na?
)
?is.na
table(is.na(data$steps))
table(is.na(data$interval))
table(is.na(data$date))
count(is.na(data$date))
count(is.na(data$steps))
sum(is.na(data$steps))
is.na(data)
sum(is.na(data))
averageinterval
new_data <- data
new_data
missing <- is.na(data$steps)
missing
data[missing]
data[missing,]
medianinterval <- ddply(data, .(interval), summarize, steps=median(steps, na.rm=TRUE))
medianinterval
meaninterval <- ddply(data, .(interval), summarize, steps=mean(steps, na.rm=TRUE))
meaninterval
data[missing, ]
entries_missing <- data[missing, ]
with(entries_missing, steps <- meaninterval[interval == meaninterval$interval, steps])
with(entries_missing, steps <- meaninterval[interval == meaninterval$interval,)
with(entries_missing, steps <- meaninterval[interval == meaninterval$interval,])
entries_missing
head(entries_missing)
length(entries_missing)
nrow(entries_missing)
entries_missing$steps <- meaninterval[entries_missing$interval == meaninterval$interval,steps]
entries_missing$steps <- meaninterval[entries_missing$interval == meaninterval$interval,meaninterval$steps]
entries_missing$steps <- meaninterval[entries_missing$interval == meaninterval$interval:meaninterval$steps]
entries_missing
for(row in entires_missing){}
for(row in entires_missing){
row$steps }
imputed_vales <- vector()
for(row in entries_missing){
new_step <- meaninterval[row$interval==meaninterval$interval, meaninterval$steps]
imputed_vales <- c(imputed_vales, new_step)
}
meaninterval[meaninterval$interval==45, meaninterval$steps]
head(meaninterval)
meaninterval[meaninterval$interval==45: meaninterval$steps]
meaninterval[meaninterval$interval==45:]
meaninterval[meaninterval$interval==45,]
meaninterval[meaninterval$interval==45]
meaninterval[meaninterval$interval==45,]
meaninterval[meaninterval$interval==45, 'steps']
meaninterval['interval'==45, 'steps']
meaninterval[meaninterval$interval==45, 'steps']
imputed_values <- vector()
for(row in missing_entries){print(row$interval)}
missing_entries
missing
missing_entires
missing
missing_entries <- data[missing,]
missing_entries
nrow(missing_entries)
for(row in missing_entries){print(row$interval)}
for(row in missing_entries){print(row)}
for(interval in missing_entries$interval){print(interval)}
for(interval in missing_entries$interval){
new_step <- meaninterval[meaninterval$interval==interval, 'steps']
imputed_values <- c(imputed_values, new_step)}
imputed_values
new_data <- data
new_data[missing, 'steps'] <- imputed_values
is.na(new_data)
sum(is.na(new_data))
weekdays(data$date)
?weekdays
?weekday
?weekend
isweekday(data$date)
isWeekday(data$date)
library(timeDate)
install.packages(timeDAte)
install.packages('timeDate')
library(timeDate)
isWeekday(data$date)
weekdays(data$date)
wkdays <- weekdays(data$date)
wkdays
?ifelse
ifelse(wkdays %in% c("Sunday", "Saterday"), 1, 0)
temp <- ifelse(wkdays %in% c("Sunday", "Saterday"), 1, 0)
temp
factor_weekday <- factor(temp, labels=c("weekday", "weekend")
)
factor_weekday
table(factor_weekday)
table(wkday)
wkdays
table(wkday)
table(factor_weekday)
table(temp)
